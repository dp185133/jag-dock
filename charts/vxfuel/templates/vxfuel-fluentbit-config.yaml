apiVersion: v1
data:
  fluent-bit.conf: "#Configure Fluent Bit Service\r\n[SERVICE]\r\n    #Enable Prometheus
    Metrics for FluentBit\r\n    HTTP_Server     On\r\n    HTTP_Listen     0.0.0.0\r\n
    \   HTTP_PORT       8089\r\n    #Write service logs to file\r\n    Log_File        /persist/fluentbit/log/vxfuel.log\r\n
    \   Log_Level       debug\r\n    Parsers_File    fuel-parser.conf\r\n    Grace
    \          5\r\n    Flush           5\r\n\r\n#FluentBit's Own Log\r\n[INPUT]\r\n
    \   Name            tail\r\n    Path            /persist/fluentbit/log/vxfuel.log\r\n
    \   Path_Key        logFilePath\r\n    Parser          vxfuel-fluentbitlog-parser\r\n
    \   Tag             vxfuel.fluentbitlog\r\n    DB              /persist/fluentbit/db/vxfuel.fluentbitlog.db\r\n
    \   Ignore_Older    7d\r\n    Read_from_Head  true\r\n\r\n#Serilog(s)\r\n[INPUT]\r\n
    \   Name            tail\r\n    Path            /persist/logConfigurationService-log-*.json,
    /persist/logDevMan-log-*.json, /persist/logeventfilejson_*.json, /persist/logIcarus-log-*.json,
    /persist/logJagEventManager-log-*.json, /persist/logPriceChangeManager-log-*.json,
    /persist/logRadStart-log-*.json, /persist/logSecurityService-log-*.json, /persist/logSMClient-log-*.json,
    /persist/logTeleQ-log-*.json\r\n    Path_Key        logFilePath\r\n    Parser
    \         fuel-serilog-parser\r\n    Tag             fuel.serilog\r\n    DB              /persist/fluentbit/db/fuel.serilog.db\r\n
    \   Ignore_Older    7d\r\n    Read_from_Head  true\r\n\r\n#BinaryVersions.log\r\n[INPUT]\r\n
    \   Name                tail\r\n    Path                /persist/logBinaryVersions*.log\r\n
    \   Path_Key            logFilePath\r\n    multiline.parser    fuel-binaryversions-multilineparser\r\n
    \   Tag                 fuel.binaryversions\r\n    DB                 /persist/fluentbit/db/fuel.binaryversions.db\r\n
    \   Ignore_Older        7d\r\n    Read_from_Head      true\r\n\r\n#discovery.log\r\n[INPUT]\r\n
    \   Name            tail\r\n    Path            /persist/logdiscovery*.log\r\n
    \   Path_Key        logFilePath\r\n    Parser          fuel-discoverylog-parser\r\n
    \   Tag             fuel.discoverylog\r\n    DB              /persist/fluentbit/db/fuel.discoverylog.db\r\n
    \   Ignore_Older    7d\r\n    Read_from_Head  true\r\n\r\n#Error.log\r\n[INPUT]\r\n
    \   Name            tail\r\n    Path            /persist/logError*.log\r\n    Path_Key
    \       logFilePath\r\n    Parser          fuel-errorlog-parser\r\n    Tag             fuel.errorlog\r\n
    \   DB              /persist/fluentbit/db/fuel.errorlog.db\r\n    Ignore_Older
    \   7d\r\n    Read_from_Head  true\r\n\r\n#logging.txt\r\n[INPUT]\r\n    Name
    \           tail\r\n    Path            /persist/loglogging*.txt\r\n    Path_Key
    \       logFilePath\r\n    Parser          fuel-logging-parser\r\n    Tag             fuel.logging\r\n
    \   DB              /persist/fluentbit/db/fuel.logging.db\r\n    Ignore_Older
    \   7d\r\n    Read_from_Head  true\r\n\r\n#RadBoot.log\r\n[INPUT]\r\n    Name
    \           tail\r\n    Path            /persist/logRadBoot*.log\r\n    Path_Key
    \       logFilePath\r\n    Parser          fuel-radbootlog-parser\r\n    Tag             fuel.radbootlog\r\n
    \   DB              /persist/fluentbit/db/fuel.radbootlog.db\r\n    Ignore_Older
    \   7d\r\n    Read_from_Head  true\r\n\r\n#FluentBit's Own Log - Transform to
    Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match   vxfuel.fluentbitlog\r\n
    \   Script  fuellog-to-googlelog.lua\r\n    call    transformFluentbitlog\r\n\r\n#Serilog(s)
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.serilog\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformSerilog\r\n\r\n#BinaryVersions.log
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.binaryversions\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformBinaryVersionsLog\r\n\r\n#discovery.log
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.discoverylog\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformDiscoverylog\r\n\r\n#Error.log
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.errorlog\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformErrorlog\r\n\r\n#logging.txt
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.logging\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformLogging\r\n\r\n#RadBoot.log
    - Transform to Google Standard Log model\r\n[FILTER]\r\n    Name    lua\r\n    Match
    \  fuel.radbootlog\r\n    Script  fuellog-to-googlelog.lua\r\n    call    transformRadbootlog\r\n\r\n#Write
    to stdout\r\n[OUTPUT]\r\n    Name            stdout\r\n    Format          json_lines\r\n
    \   #Format          json_stream\r\n    json_date_key   false\r\n    Match           *\r\n"
  fuel-parser.conf: "[PARSER]\r\n    Name        vxfuel-fluentbitlog-parser\r\n    Format
    \     regex\r\n    regex       ^\\[(?<time>\\d+\\/\\d+\\/\\d+\\s\\d+:\\d+:\\d+)\\]\\s\\[\\s*(?<severity>[a-zA-Z]+)\\]\\s*(?<message>.*)\r\n
    \   Time_Key    time\r\n    Time_Format %Y/%m/%d %H:%M:%S\r\n    Time_Keep   On\r\n\r\n[PARSER]\r\n
    \   #TODO: Add parsing of UTC offset at the end of timestamp. -%:z doesn't work
    in Fluent bit 2.22\r\n    Name fuel-serilog-parser\r\n    Format json\r\n    Time_Key
    @t\r\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\r\n    Time_Keep   On\r\n\r\n[PARSER]\r\n
    \   Name        fuel-discoverylog-parser\r\n    Format      regex\r\n    regex
    \      ^(?<time>\\d+-\\d+-\\d+ \\d+:\\d+:\\d+)\\s+(?<severity>[a-zA-Z]+)\\s+:\\s+:\\s+(?<message>.*)\r\n
    \   Time_Key    time\r\n    Time_Format %Y-%m-%d %H:%M:%S\r\n    Time_Keep   On\r\n\r\n[PARSER]\r\n
    \   Name        fuel-errorlog-parser\r\n    Format      regex\r\n    regex       ^(?<time>\\d+\\/\\d+\\/\\d+
    \\d+:\\d+:\\d+.\\d+)\\s(?<module>[a-zA-Z]+)\\s-\\s(?<message>.*)\r\n    Time_Key
    \   time\r\n    Time_Format %Y/%m/%d %H:%M:%S.%L\r\n    Time_Keep   On\r\n\r\n[PARSER]\r\n
    \   Name        fuel-logging-parser\r\n    Format      regex\r\n    regex       ^(?<time>\\d+-\\d+-\\d+
    \\d+:\\d+:\\d+)\\s(?<severity>[a-zA-Z]+)\\s+\\W*(?<message>.*)\r\n    Time_Key
    \   time\r\n    Time_Format %Y-%m-%d %H:%M:%S\r\n    Time_Keep   On\r\n\r\n[PARSER]\r\n
    \   Name        fuel-radbootlog-parser\r\n    Format      regex\r\n    regex       ^\\[(?<time>\\d+:\\d+:\\d+.\\d+)\\]\\s(?<date>\\d+\\/\\d+\\/\\d+)\\s(?<message>.*)\r\n\r\n[MULTILINE_PARSER]\r\n
    \   name          fuel-binaryversions-multilineparser\r\n    type          regex\r\n
    \   flush_timeout 1000\r\n    rule      \"start_state\"    \"/^.+FastPoint.+/\"
    \            \"line2\"\r\n    rule      \"line2\"          \"/^\\s+Version.+/\"
    \             \"line3\"\r\n    rule      \"line3\"          \"/^\\s+Timestamp.+/\"
    \           \"line4\"\r\n    rule      \"line4\"          \"/^\\s+Size.+/\"                 \"line5\"\r\n
    \   rule      \"line5\"          \"/^\\s+Commit.+/\"               \"line6\"\r\n
    \   rule      \"line6\"          \"/^\\s*$/\"                      \"line6\"\r\n"
  fuellog-to-googlelog.lua: "local function mapSeverity(jagSeverity)\r\n    if     jagSeverity
    == \"Trace\" then return(\"TRACE\")\r\n    elseif jagSeverity == \"Debug\" then
    return(\"DEBUG\")\r\n    elseif jagSeverity == \"Info\" then return(\"INFO\")\r\n
    \   elseif jagSeverity == \"Warning\" then return(\"WARNING\")\r\n    elseif jagSeverity
    == \"Error\" then return(\"ERROR\")\r\n    else return jagSeverity\r\n    end\r\nend\r\n\r\nfunction
    transformFluentbitlog(tag, timestamp, record)\r\n    newRecord = {}\r\n    newRecord[\"severity\"]
    = record[\"severity\"]\r\n    --convert time to rfc3339\r\n    newRecord[\"time\"]
    = string.gsub(record[\"time\"],\"/\", \"-\")\r\n    newRecord[\"time\"] = string.gsub(newRecord[\"time\"],\"
    \", \"T\")\r\n    newRecord[\"message\"] = record[\"message\"]\r\n    local labels
    = {module = record[\"module\"], logname = record[\"logFilePath\"]}\r\n    if (next(labels)
    ~= nil) then --check if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction
    transformSerilog(tag, timestamp, record)\r\n    newRecord = {}\r\n    newRecord[\"severity\"]
    = mapSeverity(record[\"@l\"]);\r\n    newRecord[\"message\"] = record\r\n    newRecord[\"time\"]
    = record[\"@t\"]\r\n    --event and module are not always present in each record,
    therefore do not append labels if there are none\r\n    local labels = {event
    = record[\"@i\"], module = record[\"module\"], applicationName = record[\"ApplicationName\"],
    sourceContext = record[\"SourceContext\"], logname = record[\"logFilePath\"]}\r\n
    \   if (next(labels) ~= nil) then --check if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    --Remove \"logFilePath\" from the record, it was artifically
    added in the [INPUT] section to be transformed to a label\r\n    newRecord[\"message\"][\"logFilePath\"]
    = nil\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction transformBinaryVersionsLog(tag,
    timestamp, record)\r\n    newRecord = {}\r\n    newRecord[\"time\"] = record[\"log\"]:match('^.*Timestamp:
    (%d+-%d+-%d+ %d+:%d+:%d+)') --extract timestamp from original log\r\n    --convert
    time to rfc3339\r\n    newRecord[\"time\"] = string.gsub(newRecord[\"time\"],\"
    \", \"T\")\r\n    newRecord[\"message\"] = record[\"log\"]\r\n\r\n    local labels
    = {logname = record[\"logFilePath\"]}\r\n    if (next(labels) ~= nil) then --check
    if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction
    transformDiscoverylog(tag, timestamp, record)\r\n    newRecord = {}\r\n    --convert
    time to rfc3339\r\n    newRecord[\"time\"] = string.gsub(record[\"time\"],\" \",
    \"T\")\r\n    newRecord[\"severity\"] = record[\"severity\"]\r\n    newRecord[\"message\"]
    = record[\"message\"]\r\n    local labels = {logname = record[\"logFilePath\"]}\r\n
    \   if (next(labels) ~= nil) then --check if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction
    transformErrorlog(tag, timestamp, record)\r\n    newRecord = {}\r\n    newRecord[\"severity\"]
    = \"ERROR\"\r\n    --convert time to rfc3339\r\n    newRecord[\"time\"] = string.gsub(record[\"time\"],\"/\",
    \"-\")\r\n    newRecord[\"time\"] = string.gsub(newRecord[\"time\"],\" \", \"T\")\r\n
    \   newRecord[\"message\"] = record[\"message\"]\r\n    local labels = {module
    = record[\"module\"], logname = record[\"logFilePath\"]}\r\n    if (next(labels)
    ~= nil) then --check if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction
    transformLogging(tag, timestamp, record)\r\n    newRecord = {}\r\n    --convert
    time to rfc3339\r\n    newRecord[\"time\"] = string.gsub(record[\"time\"],\" \",
    \"T\")\r\n    newRecord[\"severity\"] = record[\"severity\"]\r\n    newRecord[\"message\"]
    = record[\"message\"]\r\n    local labels = {logname = record[\"logFilePath\"]}\r\n
    \   if (next(labels) ~= nil) then --check if we have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend\r\n\r\nfunction
    transformRadbootlog(tag, timestamp, record)\r\n    newRecord = {}\r\n    --convert
    time to rfc3339\r\n    local m, d, y = record[\"date\"]:match('^(%d+)/(%d+)/(%d+)')\r\n
    \   newRecord[\"time\"] = y .. \"-\" .. m .. \"-\" .. d .. \"T\" .. record[\"time\"]\r\n
    \   newRecord[\"message\"] = record[\"message\"]\r\n    local labels = {logname
    = record[\"logFilePath\"]}\r\n    if (next(labels) ~= nil) then --check if we
    have at least one label\r\n        newRecord[\"logging.googleapis.com/labels\"]
    = labels\r\n    end\r\n    return 1, timestamp, newRecord\r\nend"
kind: ConfigMap
metadata:
  name: vxfuel-fluentbit-config
  namespace: vx
