apiVersion: v1
data:
  fluent-bit.conf: "[SERVICE]\r\n    #Configure Fluent Bit Service\r\n    #Optional:
    Write service logs to file\r\n    Log_File        /persist/fluentbit/log/fb_jagsidecar.log\r\n
    \   Log_Level       debug\r\n    Parsers_File    jaglog-parser.conf\r\n    Grace
    \          5\r\n    Flush           5\r\n\r\n[INPUT]\r\n    #Monitor jaglogs in
    json file format\r\n    Name            tail\r\n    Path            /persist/log/eventfilejson_*.json\r\n
    \   Path_Key        filename\r\n    Parser          jaglog-parser\r\n    Tag             fuel.jaglog\r\n
    \   #Optional: keep track of processed data in case FB stops running\r\n    DB
    \             /persist/fluentbit/db/fuel.jaglog.db\r\n    #Optional: Ignore records
    older than specified time (in minutes, hours or days)\r\n    Ignore_Older    7d\r\n
    \   Read_from_Head  true\r\n\r\n[INPUT]\r\n    #Monitor radstart logs in json
    file format\r\n    Name            tail\r\n    Path            /persist/log/RadStart-log-*.json\r\n
    \   Path_Key        filename\r\n    Parser          jaglog-parser\r\n    Tag             fuel.radstartlog\r\n
    \   #Optional: keep track of processed data in case FB stops running\r\n    DB
    \             /persist/fluentbit/db/fuel.radstartlog.db\r\n    #Optional: Ignore
    records older than specified time (in minutes, hours or days)\r\n    Ignore_Older
    \   7d\r\n    Read_from_Head  true\r\n\r\n[FILTER]\r\n    #rewrite_tag filter
    doesn't work with record key that starts with some special characters such as
    @.\r\n    #Therefore need to create a copy of the key without special character
    so that it can be filtered on\r\n    Name    modify\r\n    Match   fuel.*\r\n
    \   Copy    @mt mt\r\n\r\n[FILTER]\r\n    #Filter jaglog messages we want\r\n
    \   Name    rewrite_tag\r\n    Match   fuel.jaglog\r\n    #process all log entries\r\n
    \   Rule    mt .* $TAG.filtered false\r\n    #filter specific message\r\n    #Rule
    \   @i /ERROR/ $TAG.filtered false\r\n\r\n[FILTER]\r\n    #Filter radstartlog
    messages we want\r\n    Name    rewrite_tag\r\n    Match   fuel.radstartlog\r\n
    \   #process all log entries\r\n    Rule     mt .* radstartlog.filtered false\r\n
    \   #filter specific message\r\n    #Rule    mt ^SDK\\sVersions $TAG.filtered
    false\r\n\r\n[FILTER]\r\n    #Remove mt field that we added earlier. We no longer
    needed and don't want it to show up in final output together with original @mt
    field.\r\n    Name    modify\r\n    Match   fuel.*.filtered\r\n    Remove  mt\r\n\r\n[FILTER]\r\n
    \   #Transform to Google Standard Log model\r\n    Name    lua\r\n    Match   fuel.*.filtered\r\n
    \   Script  jaglog-to-googlelog.lua\r\n    call    transformRecord\r\n\r\n[OUTPUT]\r\n
    \   #Write to command line for debugging\r\n    Name            stdout\r\n    Format
    \         json_lines\r\n    #Format          json_stream\r\n    json_date_key
    \  false\r\n    Match           fuel.*.filtered"
  fluent_common.lua: "local fluent_common ={}\r\n\r\n--seed random number generator
    when FluentBit starts\r\nmath.randomseed(os.time())\r\n\r\nfunction fluent_common.uuid()\r\n
    \   local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\r\n    return string.gsub(template,
    '[xy]', function (c)\r\n        local v = (c == 'x') and math.random(0, 0xf) or
    math.random(8, 0xb)\r\n        return string.format('%x', v)\r\n    end)\r\nend\r\n\r\nreturn
    fluent_common"
  jaglog-parser.conf: "[PARSER]\r\n    #TODO: Add parsing of UTC offset at the end
    of timestamp. -%:z doesn't work\r\n    Name jaglog-parser\r\n    Format json\r\n
    \   Time_Key @t\r\n    Time_Format %Y-%m-%dT%H:%M:%S.%L\r\n    Time_Keep   On"
  jaglog-to-googlelog.lua: "--package.path = package.path .. [[;?.lua;]]\r\npackage.path
    = package.path .. [[\";/fluent-bit/etc/?.lua;]]\r\nlocal fc = require('fluent_common')\r\n\r\nlocal
    function convertTimeToUTC_Z(timeString)\r\n    --jaglog timestamp contains UTC
    time offset put Pulse expects UTC Z format\r\n\r\n    --jaglog format: {\"time\":\"2023-09-21T18:14:32.058-05:00\"}\r\n
    \   local formatPattern = '^(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).(%d+)(%p)(%d+):(%d+)'\r\n
    \   local year, month, day, hour, min, sec, ms, zDir, zHour, zMin = timeString:match(formatPattern)\r\n\r\n
    \   --create timestamp\r\n    --LUA time function doesn't support milliseconds,
    therefore we need to convert time to seconds first, operate on it, and then add
    milliseconds back\r\n    local timeStamp = os.time({month=month, day=day, year=year,
    hour=hour, min=min, sec=sec})\r\n\r\n    --calculate UTC offset in seconds. account
    for plus or minus time offset direction\r\n    --negative offset direction means
    we need to add time\r\n    local offsetSeconds = tonumber(zDir..\"1\")*-1*(zHour*3600+zMin*60)\r\n\r\n
    \   --recalculate time for UTC Z format\r\n    timeStamp = timeStamp + offsetSeconds\r\n\r\n
    \   --format date, add back milliseconds, decorate with \"Z\" to indicate UTC
    Z\r\n    return os.date(\"%Y-%m-%dT%H:%M:%S\", timeStamp) .. \".\" .. ms .. \"Z\"\r\n\r\nend\r\n\r\nlocal
    function mapSeverity(jagSeverity)\r\n    if     jagSeverity == \"Debug\" then
    return(\"DEBUG\")\r\n    elseif jagSeverity == \"Info\" then return(\"INFO\")\r\n
    \   elseif jagSeverity == \"Warning\" then return(\"WARNING\")\r\n    elseif jagSeverity
    == \"Error\" then return(\"ERROR\")\r\n    end\r\n\r\nend\r\n\r\nfunction transformRecord(tag,
    timestamp, record)\r\n    newRecord = {}\r\n    newRecord[\"severity\"] = mapSeverity(record[\"@l\"]);\r\n
    \   newRecord[\"message\"] = record\r\n    newRecord[\"time\"] = convertTimeToUTC_Z(record[\"@t\"])\r\n\r\n
    \   return 1, timestamp, newRecord\r\nend"
kind: ConfigMap
metadata:
  creationTimestamp: "2024-04-01T21:34:59Z"
  name: fluentbit-config
  namespace: vx
  resourceVersion: "1045907"
  uid: c17bd544-341f-4b02-8d10-389a8c872b7a
